# ChatApp Project Summary

## Overview
ChatApp is a full-stack web application designed for real-time messaging. It consists of a **Frontend** built with React and Vite, and a **Backend** powered by Node.js, Express, and MongoDB. The application supports user authentication, real-time messaging using Socket.IO, and persistent storage of conversations and messages.

---

## Frontend
The frontend is implemented using React and styled with TailwindCSS. It provides a responsive user interface for user authentication, messaging, and managing conversations.

### Key Features:
1. **Authentication Pages**:
   - **SignUp**: Allows users to register by providing their name, email, and password.
   - **LogIn**: Enables users to log in with their credentials. Tokens and user details are stored in `localStorage`.

2. **Protected Routes**:
   - The `Home` page is protected and accessible only to authenticated users.

3. **Real-Time Messaging**:
   - Users can send and receive messages in real-time using Socket.IO.

4. **Conversation Management**:
   - Users can view their conversations and start new ones with other users.

5. **User Interface**:
   - Built with TailwindCSS for a clean and modern design.
   - Components like forms, chat windows, and user lists are styled for usability.

### File Structure:
- **`src/page/Start.jsx`**: Combines the `SignUp` and `LogIn` components.
- **`src/page/SignUp.jsx`**: Handles user registration.
- **`src/page/LogIn.jsx`**: Manages user login.
- **`src/page/Home.jsx`**: Displays conversations, messages, and active users.
- **`src/App.jsx`**: Defines routes and manages protected access.
- **`vite.config.js`**: Configures the development server and API proxy.

---

## Backend
The backend is built with Node.js and Express, using MongoDB for data storage. It handles user authentication, conversation management, and real-time messaging.

### Key Features:
1. **User Authentication**:
   - Users can register and log in.
   - Passwords are hashed using `bcrypt`.
   - JWT is used for session management.

2. **Real-Time Messaging**:
   - Socket.IO is used to enable real-time communication between users.
   - Messages are sent and received instantly.

3. **Database Models**:
   - **User**: Stores user details like name, email, password, and token.
   - **Conversation**: Tracks participants in a conversation.
   - **Message**: Stores messages with sender, receiver, and conversation details.

4. **API Endpoints**:
   - **`/api/signUp`**: Registers a new user.
   - **`/api/login`**: Authenticates a user and returns a token.
   - **`/api/conversation`**: Manages conversations.
   - **`/api/message`**: Handles message storage and retrieval.
   - **`/api/users`**: Fetches a list of all users.

5. **Socket.IO Integration**:
   - Manages user connections and disconnections.
   - Handles real-time message delivery.

### File Structure:
- **`app.js`**: Main server file. Configures routes, middleware, and Socket.IO.
- **`db/connection.js`**: Establishes a connection to MongoDB.
- **`models/User.js`**: Defines the user schema.
- **`models/Conversation.js`**: Defines the conversation schema.
- **`models/Message.js`**: Defines the message schema.

---

## Technologies Used
### Frontend:
- React
- Vite
- TailwindCSS
- Axios
- React Router DOM
- Socket.IO Client

### Backend:
- Node.js
- Express
- MongoDB
- Mongoose
- Socket.IO
- Bcrypt
- JSON Web Token (JWT)

---

## How It Works
1. **User Authentication**:
   - Users sign up or log in via the frontend.
   - The backend validates credentials and issues a JWT.

2. **Real-Time Messaging**:
   - Users connect to the Socket.IO server.
   - Messages are sent and received in real-time.

3. **Data Persistence**:
   - Conversations and messages are stored in MongoDB.
   - Users can retrieve their chat history.

4. **Frontend-Backend Communication**:
   - The frontend communicates with the backend via REST APIs and WebSocket events.

---

## Future Enhancements
- Add typing indicators and read receipts.
- Implement group chats.
- Enhance security with HTTPS and environment-based configurations.
- Add profile management features.

---

This project demonstrates a complete real-time chat application with modern web technologies.